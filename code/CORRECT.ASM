.MODEL SMALL
.STACK 100
.DATA
	; EXTRA/USEFUL CONSTANTS
	STUB			DB "STUB$"
	TENDW           DW 10
	SIGN            DB "RM $"
	CENTS           DB ".00$" 
	CONFIRMATION    DB ?
	

    ; MAIN SCREEN
	LOGO			DB " __         ______     __  __     ______   ______     ______", 13, 10
					DB "/\ \       /\  __ \   /\ \_\ \   /\  == \ /\  __ \   /\  ___\", 13, 10
					DB "\ \ \____  \ \ \/\ \  \ \  __ \  \ \  _-/ \ \ \/\ \  \ \___  \", 13, 10
					DB " \ \_____\  \ \_____\  \ \_\ \_\  \ \_\    \ \_____\  \/\_____\", 13, 10
					DB "  \/_____/   \/_____/   \/_/\/_/   \/_/     \/_____/   \/_____/", 13, 10, "$"

	STRSEPARATOR	DB "===============================================================", 13, 10, "$"
	STRWELCOME		DB "               WELCOME TO LOH PORK SALES SYSTEM", 13, 10, "$"
	STRMAINWARN		DB " AUTHORIZED USER ONLY. UNAUTHORIZED ACCESS IS AGAINST THE LAW", 13, 10, "$"
	USERMENUCHOICE  DB ?

	; LOGIN
	STRREQUESTPW 	DB "PLEASE ENTER PASSWORD: $"
	STRLOGINSUCCESS DB "USER AUTHORIZED. WELCOME!$"
	STRLOGINFAIL 	DB "INCORRECT LOGIN DETAILS. PLEASE TRY AGAIN$"
	STRPW			DB "PASSWORD$"
	USERPW			DB 20           ; MAX CHAR
	                DB ?            ; NUM OF CHAR ENTERED
	                DB 20 DUP(0DH)  ; BUFFER FOR CHAR ENTERED
	
	; MAIN MENU
	STRMAINMENU 	DB "===========================MAIN MENU===========================",13,10
	                DB "1.	PURCHASE",13,10
	                DB "2.	BILLING",13,10
	                DB "3.	SUMMARY",13,10
	                DB "4.	EXIT",13,10
					DB "ENTER YOUR CHOICE: (1-4): ",'$'

	; LOGIN
	LOGINSTUB			DB "LOGIN STUB$"


	; BILLING
    BILLSTUB			DB "BILLING STUB$"

	TITSTR DB "		       | CALCULATE PRICE OF MEAT |$"
	STR DB "		       ENTER WEIGHT OF MEAT(KG): $"
	PATTERN DB "		       ===========================$" 
	STR1 DB "		       PRICE OF MEAT BOUGHT IS RM$"
	STR2 DB "		       DO YOU WISH TO MAKE PAYMENT? (Y-YES)$"
	STR3 DB "		       ENTER AMOUNT FOR PAYMENT: $"
	STR4 DB "		       THANK YOU! YOUR BALANCE IS RM $"

	MTYPE DB ?
	WEIGHT1 DW ?
	MPRICE DW ?
	TPRICE DW ?
	AMOUNT DB ?
	QTY DB ?
	PRICE DW ?
    	COUNTS DB ?
	PRICEPKG DB 9,10,11,13,8	;ARRAY FOR MEAT PRICE

	INPUT_AMNT LABEL BYTE    
    	AMNT_MAXN DB 6
    	AMNT_ACTN DB ?
    	AMNT DB 7 DUP("$") 


	; PURCHASE
   
	 PURCSTUB			DB "PURCHASE STUB$"
    WEIGHT_TITLE DB "           		      WEIGHT CALCULATOR$"
    ASTERISK DB "           		      *****************$"
    DASH DB "           	 +----------------------------------------+$"
    MSG1 DB  "          	 |             TYPES OF PORK    	  |$"

	MSG2 DB "		     ENTER A NUMBER (1 TO 6): $"
	ERRORM DB "		     INVALID! PLEASE ENTER AGAIN! $"
	MSG3 DB "		     ENTER THE WEIGHT (1KG,3KG OR 5KG): $"
	MSG4 DB "		     ENTER THE QUANTITY: $"
	MSG5 DB "		     THE TOTAL WEIGHT IS $"
	MSG6 DB " KG$"
	MSG7 DB "		     DO YOU WANT TO CONTINUE? (Y-YES) $"
	

	BELLY DB "           	 |     1.     PORK BELLY  (BEST SELLING)  |$"
	LOIN DB "           	 |     2.     PORK LOIN       		  |$"
	RIB DB "          	 |     3.     PORK RIB  (DELICIOUS)	  |$"
	SHOULDER DB "           	 |     4.     PORK SHOULDER   		  |$"
	HAM DB "           	 |     5.     HAM            	 	  |$"
	QUIT DB "           	 |     6.     QUIT            		  |$"

	
	TYPE_STR LABEL BYTE    
	TYPE_MAXN DB 2
	TYPE_ACTN DB ?
	CHOICE DB 3 DUP("$") 

	WEIGHT_STR LABEL BYTE    
	WEIGHT_MAXN DB 2
	WEIGHT_ACTN DB ?
	WEIGHT DB 3 DUP("$")

	QUANTITY_STR LABEL BYTE    
    QUANTITY_MAXN DB 4
    QUANTITY_ACTN DB ?
    QUANTITY DB 5 DUP("$")    

	WGT DW ?
	TOTAL_WEIGHT DW 0


	; SUMMARY
	SUMTITLE			DB "SUMMARY", 13, 10, "$"
	TATXT               DB "TOTAL ACTIONS: $"    ; UPDATE HERE AFTER EACH LOOP
	TFTXT			    DB "TOTAL FIGURES: $"    ; UPDATE HERE AFTER EACH TRANSACTIONS
	TOTALACTIONS        DW 0
	TOTALFIGURE         DW 0
	OPERAND             DW ?
	OPERATOR            DW ?

	QUANT DW ?
    
.CODE
MAIN PROC
    MOV AX,@DATA
    MOV DS,AX

	CALL CLEAR_SCREEN
	
    CALL PRINT_LOGO
    	
	
	CALL LOGIN
	
	MENU:
			
		CALL NEXT_LINE
		CALL DISPLAY_MENU
		
		; CHECK PURCHASE
		CHKPURC:
			CMP USERMENUCHOICE, '1'
			JZ PURC
			JNZ CHKBILL
			
			PURC:
				CALL CLEAR_SCREEN
				CALL PURCHASE
		; CHECK BILL
		CHKBILL:
			CMP USERMENUCHOICE, '2'
			JZ BILL
			JNZ CHKSUM
			
			BILL:
				CALL CLEAR_SCREEN
				CALL BILLING
		; CHECK SUM
		CHKSUM:
			CMP USERMENUCHOICE, '3'
			JZ SUM
			JNZ CHKEXIT
			SUM:
				CALL SUMMARY
			
		; END PROGRAM
		CHKEXIT:
			CMP USERMENUCHOICE, '4'
			JZ EXIT
			JNZ CONTINUE
			EXIT:
				MOV AX,4C00H
				INT 21H
		CONTINUE:
			LOOP 	MENU
    
MAIN ENDP

DISPWORD PROC
	MOV DX, 0
	MOV CX, 5
	MOV OPERAND, 10000
	DIVDISPDW:
		; DIVIDE
		MOV AX, BX
		DIV OPERAND
		MOV OPERATOR, DX

		CMP AX, 0
		JZ CONTDISPWORD
		
		MOV DX, AX
		MOV AH, 02H
		ADD DL, "0"
		INT 21H
		
		CONTDISPWORD:
    		MOV AX, OPERAND
    		MOV DX, 0
    		DIV TENDW
    		MOV OPERAND, AX
    		MOV AX, OPERATOR
    		MOV BX, AX  

		LOOP DIVDISPDW
		
		RET
DISPWORD ENDP

; DISPLAY MAIN-MENU FUNCTION
DISPLAY_MENU PROC
	; DISPLAY MENU
	MOV	DX, OFFSET STRMAINMENU
	MOV	AH, 9
	INT	21H
	; ASK FOR CHOICE
	MOV	AH, 01H ; ASK FOR INPUT
	INT	21H     ; STORE IN AL
	MOV USERMENUCHOICE, AL
	RET
DISPLAY_MENU ENDP

; DISPLAY NEXT-LINE FUNCTION
NEXT_LINE PROC
	MOV 	AH, 02H
	MOV		DL, 0DH		; CR
	INT		21H
	MOV		DL, 0AH		; LF
	INT 	21H
	RET
NEXT_LINE ENDP

; DIVIDES AND DISPLAYS CONTENT IN AX REGISTER IN 5-DIGITS.
DISPAX PROC
	MOV DX, 0
	MOV CX, 5
	MOV OPERAND, 10000
	MOV DX, 0
	DIVDISP:
		; DIVIDE
		
		DIV OPERAND
		MOV OPERATOR, DX
		
		MOV DX, AX
		MOV AH, 02H
		ADD DL, "0"
		INT 21H
		
		MOV AX, OPERAND
		MOV DX, 0
		DIV TENDW
		MOV OPERAND, AX
		MOV AX, OPERATOR  

		LOOP DIVDISP
		RET
DISPAX ENDP

DISPLAY_MEAT_MENU PROC	

;-----DISPLAY MEAT MENU
	CALL NEXT_LINE
	
	MOV AH,09H
	LEA DX,DASH
	INT 21H
	
	CALL NEXT_LINE
	
	MOV AH,09H
	LEA DX,MSG1
	INT 21H

	CALL NEXT_LINE

	MOV AH,09H
	LEA DX,DASH
	INT 21H

	CALL NEXT_LINE
	
	MOV AH,09H
	LEA DX,BELLY
	INT 21H

	CALL NEXT_LINE

	MOV AH,09H
	LEA DX,LOIN
	INT 21H

	CALL NEXT_LINE

	MOV AH,09H
	LEA DX,RIB
	INT 21H

	CALL NEXT_LINE

	MOV AH,09H
	LEA DX,SHOULDER
	INT 21H

	CALL NEXT_LINE

	MOV AH,09H
	LEA DX,HAM
	INT 21H 
	
	CALL NEXT_LINE

	MOV AH,09H
	LEA DX,QUIT
	INT 21H
		
	CALL NEXT_LINE

	MOV AH,09H
	LEA DX,DASH
	INT 21H

	CALL NEXT_LINE
	CALL NEXT_LINE

	RET
DISPLAY_MEAT_MENU ENDP

; LOGIN FUNCTION
LOGIN PROC
	;; SHOW LOGIN PROMPT
;	CALL NEXT_LINE
;	MOV	AH, 09H
;	LEA DX, STRREQUESTPW
;	INT 21H
;
;	CALL LOGIN_CMP_SETUP
;	
;	CHECKPW:
;		; COMPARE EACH LETTER
;		CMP BH, BL
;		JNE LOGINFAIL
;		
;		; IF NO MATCH, ASK USER TO TRY 
;		
;		INC DI
;		INC SI
;		
;		MOV BL, [DI]
;	    MOV BH, [SI]
;		
;		; ONCE REACH END, PERFORM FINAL CHECK
;		CMP BL, '$'
;		JNE CHECKPW
;		CMP BH, 0DH
;		JNE LOGINFAIL
;		
;		; IF ALL MATCH, WELCOME USER
;		CALL NEXT_LINE
;		
;		MOV AH, 09H
;        LEA DX, STRLOGINSUCCESS
;        INT 21H
;        
;        CALL NEXT_LINE
        RET
;        
;
;    ; ASK USER TO TRY AGAIN
;    LOGINFAIL:
;        CALL NEXT_LINE
;        MOV AH, 09H
;        LEA DX, STRLOGINFAIL
;        INT 21H
;        CALL NEXT_LINE
;        
;        CALL LOGIN_CMP_SETUP
;        JMP CHECKPW
         
LOGIN ENDP

LOGIN_CMP_SETUP PROC
    ; OVERWRITE BUFFER
    
    
    ; GET PASSWORD
	MOV AH, 0AH
	LEA DX, USERPW
	INT 21H

	; COMPARE THE STRING WITH ACTUAL PW, CHAR BY CHAR
	LEA DI, STRPW
	MOV SI, OFFSET USERPW + 2
	CALL NEXT_LINE
	
	MOV BL, [DI]
	MOV BH, [SI]
	
	RET
LOGIN_CMP_SETUP ENDP  

; PURCHASE FUNCTION
PURCHASE PROC
	CALL DISPLAY_MEAT_MENU
    
    
    MEAT_TYPE_INPUT:
	;-----DISPLAY THE INPUT MESSAGE
	CALL NEXT_LINE
	MOV AH,09H	
	LEA DX,MSG2
	INT 21H
		
	;-----ALLOW USER TO SELECT THE TYPE OF MEAT
    
        MOV AH,0AH     ;INPUT STRING
        LEA DX,TYPE_STR
        INT 21H
        
        MOV DI,0
    
        CMP CHOICE[DI],"1"
        JL INVALID

        CMP CHOICE[DI],"6"
	    JG INVALID

        
        JMP WEIGHT_INPUT

	    	INVALID:
		    	CALL ERROR
    
        JMP MEAT_TYPE_INPUT

	WEIGHT_INPUT:
		MOV BH,CHOICE[DI]
		MOV MTYPE,BH
		SUB MTYPE,30H
		DEC MTYPE


	;-----ALLOW USER TO ENTER THE WEIGHT OF MEAT
	INPUT_WEIGHT_AGAIN:			
		CALL NEXT_LINE
		CALL NEXT_LINE
		
		MOV AH,09H
		LEA DX,MSG3		        ;ENTER THE WEIGHT (1,3,5KG) :
		INT 21H
	
		
	
		MOV AH,0AH              ;INPUT STRING
        	LEA DX,WEIGHT_STR
        	INT 21H
        
        	MOV DI,0
        	MOV BL,WEIGHT[DI] 
        	SUB BL,30H
        	MOV BH,0  
        	MOV WGT,BX

		CMP WEIGHT[DI],"1"		;COMPARE THE INPUT WITH NUMBER 1
		JE QUANTITY_INPUT
		
		CMP WEIGHT[DI],"3"		;COMPARE THE INPUT WITH NUMBER 3
		JE QUANTITY_INPUT

		CMP WEIGHT[DI],"5"		;COMPARE THE INPUT WITH NUMBER 5
		JE QUANTITY_INPUT

		CALL NEXT_LINE
		
		MOV AH,09H
		LEA DX,ERRORM
		INT 21H

	JMP INPUT_WEIGHT_AGAIN
	
	
	QUANTITY_INPUT:	
	    
	    CALL NEXT_LINE
		CALL NEXT_LINE
	    
	    MOV AH,09H
		LEA DX,MSG4
		INT 21H
		
		;QTY_INPUT1:
		MOV AH,0AH              ;INPUT STRING
        LEA DX,QUANTITY_STR
        INT 21H
	
	    MOV CH,0
	    MOV CL,QUANTITY_ACTN
	    MOV SI,0
	    
	    CHECK_DIGIT:
		    
		    CMP QUANTITY[SI],47
		    JL INVALID2

		    CMP QUANTITY[SI],58
		    JG INVALID2
		
		    INC SI
		   

	    LOOP CHECK_DIGIT
	    JMP RESUME
	    
	    INVALID2:

			   CALL ERROR
	           JNE QUANTITY_INPUT
	        
	    
	    ;CALL ERROR
	
	; LOAD CHAR COUNT INTO VAR 
	   RESUME:
	    MOV BH,QUANTITY_ACTN
	        
	; CHECK IF ONLY 1 NUMBER LEFT   
	    CMP BH,1
	    MOV AX,0
	    MOV SI,0     
	    JE CALQ  
	         
	         MOV CH,0 
	         MOV CL,QUANTITY_ACTN 
	         DEC CL
	         ;MOV AL,0
	         LP1:
	  
		        MOV BL,QUANTITY[SI]
		        SUB BL,30H
			MOV BH,0
			ADD AX,BX
                	MUL TENDW
			INC SI
		
		    LOOP LP1 
	    
	    
	   CALQ:
	          MOV BL,QUANTITY[SI]
		      SUB BL,30H 
		      ;MOV AH,0 ;NEW
	              ;ADD AL,BL
		      MOV BH,0
		      ADD AX,BX
		    
		MOV QUANT,AX
	     
	    
	    ; IF NO, LOOP CALCULATION TILL ONLY LEFT 1 NUMBER 
	    
	    
	        ; ADD NUMBER TO AX
	        ; MULT BX BY 10
	        ; CONTINUE
	    ; ELSE, LOAD LAST NUMBER INTO BX
	
	; STORE INTO QUANT
	
	;MOV QUANT,AX     
	
	
	MUL WGT
	;MOV DH,0
	;MOV DL,MTYPE
	;MOV SI,DX
	MOV WEIGHT1,AX
	ADD TOTAL_WEIGHT,AX
	MOV AX,TOTAL_WEIGHT
	
	
	MOV BX,AX
	
	CALL NEXT_LINE	
	CALL NEXT_LINE
	;MOV BH,0
	;MOV BL,QUANT
	
	MOV AH,09H
	LEA DX,MSG5
	INT 21H
	
	CALL DISPWORD

	
	;MOV AH,02H
	;MOV DL,QUANT
	;ADD DL,30H
	;INT 21H

	MOV AH,09H
	LEA DX,CENTS
	INT 21H
	
	MOV AH, 09H
    LEA DX, MSG6
    INT 21H	
	

	CALL NEXT_LINE

	MOV AH,09H
	LEA DX,MSG7
	INT 21H
	
	MOV AH,01H
	INT 21H
	MOV CONFIRMATION,AL
	
	CMP CONFIRMATION,"Y"
	JE YES
	CALL MAIN
	
	YES:
	    CALL CLEAR_SCREEN
	    CALL PURCHASE
	
	
	
	
	
	CALL NEXT_LINE
	
    RET
PURCHASE ENDP

; BILLING FUNCTION
BILLING PROC 
	CALL NEXT_LINE

	CALL DISPLAY_MEAT_MENU
	
	MOV AH,09H		;PRINT PATTERN
	LEA DX,PATTERN
	INT 21H

	CALL NEXT_LINE
	
	MOV AH,09H		;PRINT TITLE
	LEA DX,TITSTR
	INT 21H

	CALL NEXT_LINE
	
	MOV AH,09H		;PRINT PATTERN
	LEA DX,PATTERN
	INT 21H

	CALL NEXT_LINE

	;CALL INPUT_MEAT_TYPE
	
	CALL NEXT_LINE
	
	MOV AH,09H
	LEA DX,STR1
	INT 21H

	MOV DH,0
	MOV DL,MTYPE
	MOV SI,DX
	MOV AX,WEIGHT1
	MOV BH,0
	MOV BL,PRICEPKG[SI]
	MUL BX
	MOV TPRICE,AX
                                       
	MOV BX,AX
	
	CALL DISPWORD

	MOV AH,09H
	LEA DX,CENTS
	INT 21H

	CALL NEXT_LINE

	MOV AH,09H		;CONTINUE FOR PAYMENT?
	LEA DX,STR2
	INT 21H	

	MOV AH,01H
	INT 21H		;INPUT CHOICE
	MOV CONFIRMATION,AL
	
	CALL NEXT_LINE
	
	CMP CONFIRMATION,"Y"
	JE NEXT
	
	CALL CLEAR_SCREEN

	RET	

	NEXT: 
	
		CALL NEXT_LINE

		MOV AH,09H
		LEA DX,STR3
		INT 21H

		MOV AH,0AH
		LEA DX,INPUT_AMNT		
		INT 21H

		CALL NEXT_LINE

		MOV BH,AMNT_ACTN
	        
	; CHECK IF ONLY 1 NUMBER LEFT   
	    CMP BH,1
	    MOV AX,0
	    MOV SI,0     
	    JE CALP  
	         
		MOV CH,0 
		MOV CL,AMNT_ACTN 
		DEC CL
		MOV AL,0
		LP2:
			MOV BL,AMNT[SI]
			SUB BL,30H
			;ADD AL,BL
			MOV BH,0
			ADD AX,BX
			MUL TENDW
			INC SI

		LOOP LP2 
	    
	    
	   CALP:
	          MOV BL,AMNT[SI]
		  SUB BL,30H 
	          ;ADD AL,BL
		  MOV BH,0
		  ADD AX,BX
		    
		MOV AMOUNT,AL
		SUB AX,TPRICE
		MOV BX,AX

		MOV AH,09H
		LEA DX,STR4
		INT 21H		

		CALL DISPWORD
		
		
	CALL CLEAR_SCREEN
	
	CALL PRINT_LOGO
	
	RET
   
BILLING ENDP

; SUMMARY FUNCTION
SUMMARY PROC
	CALL NEXT_LINE
	
	; PRINT TITLE	
	MOV	AH, 09H
    LEA DX, SUMTITLE
    INT 21H
    
    CALL NEXT_LINE
    
    ; PRINT TOTAL ACTIONS
    MOV	AH, 09H
    LEA DX, TATXT
    INT 21H

    ; DISPLAY AL (QUOTIENT)
    MOV AX, TOTALACTIONS
    
    CALL DISPAX
    
    CALL NEXT_LINE
    
    ; PRINT TOTAL FIGURES
    MOV AH, 09H
    LEA DX, TFTXT
    INT 21H
    
    ;  DISPLAY "MONEY SIGN"
    MOV AH, 09H
    LEA DX, SIGN
    INT 21H
    
    ; DISPLAY AL (QUOTIENT)
    MOV AX, TOTALFIGURE
    
    CALL DISPAX
    
    ;  DISPLAY ".00"
    MOV AH, 09H
    LEA DX, CENTS
    INT 21H 
    
    CALL NEXT_LINE
    CALL NEXT_LINE
    RET
SUMMARY ENDP 


ERROR PROC
    CALL NEXT_LINE

	MOV AH,09H
	LEA DX,ERRORM
	INT 21H
	
	CALL NEXT_LINE 
	
    RET
    
ERROR ENDP

CLEAR_SCREEN PROC
    
    MOV AH,00H    ;06 TO SCROLL & 00 FOR FULLJ SCREEN
    MOV AL,03H
    MOV BH,07    ;ATTRIBUTE 7 FOR BACKGROUND AND 1 FOR FOREGROUND
    MOV CX,0000H    ;STARTING COORDINATES
    MOV DX,184FH    ;ENDING COORDINATES
    INT 10H        ;FOR VIDEO DISPLAY
  
    
    RET  
    
    
CLEAR_SCREEN ENDP    

PRINT_LOGO PROC
	MOV AH, 09H
	LEA DX, LOGO
	INT 21H
	
	LEA DX, STRSEPARATOR
	INT 21H
	
    LEA DX, STRWELCOME
    INT 21H
    
    LEA DX, STRSEPARATOR
	INT 21H
	
	CALL NEXT_LINE
	
	MOV AH, 09H
    LEA DX, STRMAINWARN
    INT 21H
    
    CALL NEXT_LINE
	
	RET

PRINT_LOGO ENDP
END MAIN
